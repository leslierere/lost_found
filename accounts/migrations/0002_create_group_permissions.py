# Generated by Django 3.0.3 on 2020-05-07 22:13
from __future__ import unicode_literals
from django.db import migrations
from itertools import chain


def populate_permissions_lists(apps):
    permission_class = apps.get_model('auth', 'Permission')
    user_permission = permission_class.objects.filter(content_type__app_label='auth',
                                                      content_type__model='user')
    site_permission = permission_class.objects.filter(content_type__app_label='info',
                                                      content_type__model='site')
    founditem_permission = permission_class.objects.filter(content_type__app_label='info',
                                                      content_type__model='founditem')
    lostitem_permission = permission_class.objects.filter(content_type__app_label='info',
                                                      content_type__model='lostitem')

    perm_view_user = permission_class.objects.filter(content_type__app_label='auth',
                                                      content_type__model='user',
                                                     codename = 'view_user')
    perm_view_site = permission_class.objects.filter(content_type__app_label='info',
                                                      content_type__model='site',
                                                     codename='view_site')
    perm_view_founditem = permission_class.objects.filter(content_type__app_label='info',
                                                      content_type__model='founditem',
                                                     codename='view_founditem')
    perm_view_lostitem = permission_class.objects.filter(content_type__app_label='info',
                                                      content_type__model='lostitem',
                                                          codename='view_lostitem')
    perm_view_advice = permission_class.objects.filter(content_type__app_label='info',
                                                         content_type__model='advice',
                                                         codename='view_advice')
    perm_delete_advice = permission_class.objects.filter(content_type__app_label='info',
                                                         content_type__model='advice',
                                                         codename='delete_advice')

    admin_permissions = chain(site_permission,
                              founditem_permission,
                              perm_view_user,
                              perm_view_lostitem,
                              perm_view_advice,
                              perm_delete_advice)
    worker_permissions = chain(founditem_permission,
                               perm_view_user,
                               perm_view_site,
                               perm_view_lostitem,
                               perm_view_advice)
    user_permissions = chain(user_permission,
                             lostitem_permission,
                             perm_view_site,
                             perm_view_founditem)

    my_groups_initialization_list = [
        {
            "name": "admin",
            "permissions_list": admin_permissions,
        },
        {
            "name": "worker",
            "permissions_list": worker_permissions,
        },
        {
            "name": "user",
            "permissions_list": user_permissions,
        },
    ]
    return my_groups_initialization_list


def add_group_permissions_data(apps, schema_editor):
    groups_initialization_list = populate_permissions_lists(apps)

    Group = apps.get_model('auth', 'Group')
    for group in groups_initialization_list:
        if group['permissions_list'] is not None:
            group_object = Group.objects.get(
                name=group['name']
            )
            group_object.permissions.set(group['permissions_list'])
            group_object.save()


def remove_group_permissions_data(apps, schema_editor):
    groups_initialization_list = populate_permissions_lists(apps)

    Group = apps.get_model('auth', 'Group')
    for group in groups_initialization_list:
        if group['permissions_list'] is not None:
            group_object = Group.objects.get(
                name=group['name']
            )
            list_of_permissions = group['permissions_list']
            for permission in list_of_permissions:
                group_object.permissions.remove(permission)
                group_object.save()


class Migration(migrations.Migration):
    dependencies = [
        ('accounts', '0001_create_groups'),
        ('auth', '0011_update_proxy_permissions')
    ]

    operations = [
        migrations.RunPython(
            add_group_permissions_data,
            remove_group_permissions_data
        )
    ]
